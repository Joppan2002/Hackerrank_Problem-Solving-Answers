import java.io.*;
import java.util.*;
import java.util.stream.*;

class Result {
    public static int sockMerchant(int n, List<Integer> ar) {
        Set<Integer> uniqueSocks = new HashSet<>();
        int pairs = 0;

        for (int i = 0; i < n; i++) {
            int currentSock = ar.get(i);

            if (uniqueSocks.contains(currentSock)) {
                // Found a matching sock, increment pairs and remove from uniqueSocks
                pairs++;
                uniqueSocks.remove(currentSock);
            } else {
                // Haven't seen this sock color before, add to uniqueSocks
                uniqueSocks.add(currentSock);
            }
        }

        return pairs;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ar = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(Collectors.toList());

        int result = Result.sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

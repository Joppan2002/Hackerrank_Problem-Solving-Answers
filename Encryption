import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'encryption' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String encryption(String s) {
    // Remove spaces from the input string
    String nstr = "";
    int slen = s.length();
    for (int i = 0; i < slen; i++) {
        if (s.charAt(i) != ' ') {
            nstr += s.charAt(i);
        }
    }

    int nslen = nstr.length();
    int nr = (int) Math.floor(Math.sqrt((double) nslen));
    int nc = (int) Math.ceil(Math.sqrt((double) nslen));

    // Ensure the grid can accommodate all characters
    if (nr * nc < nslen) {
        nr++;
    }

    char[][] grid = new char[nr][nc];
    int i = 0;
    for (int r = 0; r < nr; r++) {
        for (int c = 0; c < nc; c++) {
            if (i < nslen) {
                grid[r][c] = nstr.charAt(i++);
            } else {
                grid[r][c] = '\0'; // Fill remaining spaces with null character
            }
        }
    }

    StringBuilder fin = new StringBuilder();
    for (int c = 0; c < nc; c++) {
        for (int r = 0; r < nr; r++) {
            if (grid[r][c] != '\0') {
                fin.append(grid[r][c]);
            }
        }
        if (c < nc - 1) {
            fin.append(' ');
        }
    }

    return fin.toString();
}


}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        String result = Result.encryption(s);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
